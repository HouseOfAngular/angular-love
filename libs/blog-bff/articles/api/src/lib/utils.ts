import type { CheerioAPI } from 'cheerio';
import hljs from 'highlight.js';

const DEFAULT_LANGUAGE_SUBSET = ['typescript', 'html', 'css', 'scss', 'json'];

type RewriteAdapter = ($: CheerioAPI) => void;

export const rewriteHTML = (...adapters: RewriteAdapter[]) => {
  return (content: CheerioAPI) => {
    adapters.forEach((adapter) => {
      adapter(content);
    });
  };
};

/**
 * Rewrites default Wordpress code blocks and applies HLJS styling
 * @param $
 */
export const wpCodeRewriter: RewriteAdapter = ($) => {
  $('pre').each((index, element) => {
    const code = $(element).text();

    // Check if the content is already wrapped in a <code> block
    // WordPress tends to render this randomly
    const hasCodeBlock = $(element).children('code').length > 0;

    // If not, wrap the content in a <code> block
    // Also add `hljs` class to make it apply hljs styling schema
    if (!hasCodeBlock) {
      $(element).html(`<code class="hljs">${code}</code>`);
    } else {
      $(element).children('code').addClass('hljs');
    }

    // Detect the language and apply syntax highlighting
    const highlightedCode = hljs.highlightAuto(
      code,
      DEFAULT_LANGUAGE_SUBSET,
    ).value;

    // Replace the content of the <code> block with the highlighted code
    $(element).children('code').html(highlightedCode);
  });
};

/**
 * Rewrites code blocks generated by `crayon` plugin and applies HLJS styling
 * @param $
 */
export const crayonCodeRewriter: RewriteAdapter = ($) => {
  $('.crayon-syntax').each((_, element) => {
    const $element = $(element);
    let code = '';

    // Extract code from Crayon lines
    $element.find('.crayon-line').each((_, line) => {
      code += $(line).text() + '\n';
    });

    // Detect the language and apply syntax highlighting
    const highlightedCode = hljs.highlightAuto(
      code,
      DEFAULT_LANGUAGE_SUBSET,
    ).value;

    // Create a new <pre><code> element with the highlighted code
    const preCodeBlock = `<pre><code class="hljs">${highlightedCode}</code></pre>`;

    // Replace the entire crayon-syntax element with the new preCodeBlock
    $element.replaceWith(preCodeBlock);
  });
};

/**
 * Removes empty paragraphs, like `<p>&nbsp;</p>`
 * @param $
 */
export const removeEmptyParagraphs: RewriteAdapter = ($) => {
  $('p').each((index, element) => {
    const $element = $(element);
    const html = $element.html().trim();

    if (html === '&nbsp;') {
      $element.remove();
    }
  });
};

/**
 * Transforms legacy links to new ones
 * @param url
 */
function transformUrl(url: string): URL {
  const parsedUrl = new URL(url);

  const hostnamesToModify = ['wp.angular.love', 'replica.angular.love'];

  const matchedHostname = hostnamesToModify.find(
    (hostname) => hostname === parsedUrl.hostname,
  );

  if (matchedHostname) {
    parsedUrl.hostname = 'angular.love';

    // Regex pattern to match optional language code and /{year}/{month}/{day}/{slug}/ structure
    const dateSlugPattern =
      /^(\/[a-z]{2})?\/(\d{4})\/(\d{2})\/(\d{2})\/([^/]+)\/?$/;

    const match = parsedUrl.pathname.match(dateSlugPattern);

    if (match) {
      // If the pattern matches, extract the language code (if present) and the slug
      const [, langCode, , , , slug] = match;

      if (langCode) {
        parsedUrl.pathname = `${langCode}/${slug}`;
      } else {
        parsedUrl.pathname = `/${slug}`;
      }
    }
  }

  return parsedUrl;
}

/**
 * Appends aria-label and target attributes to links
 * @param $
 */
export const modifyLinks: RewriteAdapter = ($) => {
  $('a').each((_, element) => {
    const $element = $(element);
    $element.attr('target', '_blank');

    if ($element.attr('href') && !$element.attr('href').startsWith('#')) {
      const originalHref = $element.attr('href');
      const transformedURL = transformUrl(originalHref);
      $element.attr('href', transformedURL.toString());

      $element.attr('aria-label', `Read more on ${transformedURL.hostname}`);
    }
  });
};

/**
 * Replaces image source to the new domain
 * @param $
 */
export const modifyImages: RewriteAdapter = ($) => {
  $('img').each((_, element) => {
    const $element = $(element);
    const src = $element.attr('src');

    if (src && src.startsWith('https://angular.love/wp-content')) {
      $element.attr(
        'src',
        src.replace(
          'https://angular.love/wp-content',
          'https://wp.angular.love/wp-content',
        ),
      );
    }
  });
};
