pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile-deploy'
            reuseNode true
        }
    }

    options {
        quietPeriod(0)
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        KV_DEV = credentials('cf-kv-dev')
        KV_PROD = credentials('cf-kv-prod')
        AL_BASE_URL = 'https://angular.love'
        TURSO_ORG="angular-love"
        TURSO_EU_DB=credentials('turso-eu-db')
        TURSO_US_WEST_DB=credentials('turso-us-west-db')
        TURSO_US_EAST_DB=credentials('turso-us-east-db')
        TURSO_EU_AUTH_TOKEN=credentials('turso-eu-auth-token')
        TURSO_US_WEST_AUTH_TOKEN=credentials('turso-us-west-auth-token')
        TURSO_US_EAST_AUTH_TOKEN=credentials('turso-us-east-auth-token')
    }

    stages {
        stage("Install dependencies") {
            steps {
                script {
                    sh """
                        corepack enable && corepack prepare pnpm@10.6.2 --activate
                        pnpm install 
                    """
                }
            }
        }
        stage("Decide environment") {
            steps {
                script {
                    env.ENVIRONMENT = 'dev'
                    env.WORKER_DOMAIN_END = '-blog-bff-dev.contact-ef8.workers.dev' 
                    if (env.BRANCH_NAME == 'main') {
                        env.ENVIRONMENT = 'prod'
                        env.WORKER_DOMAIN_END = '-blog-bff.contact-ef8.workers.dev'
                    }
                }
            }
        }
        stage("Branch db") {
            steps {
                script {
                    def timestamp = new Date().getTime()
                    def random = Math.abs(new Random().nextInt())
                    env.BRANCH_HASH = "${random}"
                    
                    def branchNameForDB = env.BRANCH_NAME
                    if (env.BRANCH_NAME.length() > 30) {
                        echo "Branch name is too long, truncating to 30 characters"
                        branchNameForDB = env.BRANCH_NAME.substring(0, 30)
                    }
                    branchNameForDB = branchNameForDB.replace("_", "-")
                    branchNameForDB = branchNameForDB.replace("/", "-")

                    env.DB_BRANCH_NAME = "${ENVIRONMENT}-${branchNameForDB}-${BRANCH_HASH}"
                    if (env.DB_BRANCH_NAME.length() > 50) {
                        echo "DB branch name is too long, truncating to 50 characters"
                        env.DB_BRANCH_NAME = env.BRANCH_NAME.substring(0, 50)
                    }
                withCredentials([string(credentialsId: 'tursor_api_token', variable: 'TURSO_API_TOKEN')]) {
                    sh """
                        turso org switch angular-love
                        turso db create eu-${DB_BRANCH_NAME} --from-db $TURSO_EU_DB --group blog-eu
                        turso db create us-west-${DB_BRANCH_NAME} --from-db $TURSO_US_WEST_DB --group blog-us-west
                        turso db create us-east-${DB_BRANCH_NAME} --from-db $TURSO_US_EAST_DB --group blog-us-east
                    """
                    env.TURSO_EU_CONNECTION_URL = "libsql://eu-${DB_BRANCH_NAME}-angular-love.turso.io"
                    env.TURSO_US_WEST_CONNECTION_URL = "libsql://us-west-${DB_BRANCH_NAME}-angular-love.turso.io"
                    env.TURSO_US_EAST_CONNECTION_URL = "libsql://us-east-${DB_BRANCH_NAME}-angular-love.turso.io"
                }
                }
                
            }
        }
        stage("Deploy bff prod") {
            stages {
                stage("Prepare secrets") {
                    steps {
                        sh """
                            sed -i "s/<kv_dev_namespace_id>/$KV_DEV/g" apps/blog-bff/wrangler.toml
                            sed -i "s/<kv_prod_namespace_id>/$KV_PROD/g" apps/blog-bff/wrangler.toml
                            echo "{
\\"TURSO_EU_CONNECTION_URL\\":\\"$TURSO_EU_CONNECTION_URL\\",
\\"TURSO_EU_AUTH_TOKEN\\":\\"$TURSO_EU_AUTH_TOKEN\\",
\\"TURSO_US_EAST_CONNECTION_URL\\":\\"$TURSO_US_EAST_CONNECTION_URL\\",
\\"TURSO_US_EAST_AUTH_TOKEN\\":\\"$TURSO_US_EAST_AUTH_TOKEN\\",
\\"TURSO_US_WEST_CONNECTION_URL\\":\\"$TURSO_US_WEST_CONNECTION_URL\\",
\\"TURSO_US_WEST_AUTH_TOKEN\\":\\"$TURSO_US_WEST_AUTH_TOKEN\\"}" > new-secrets-bff
                        """
                    }
                }
                stage ("Wrangler upload new version") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            script {
                                output = sh(returnStdout: true, script: """
                                    npx wrangler versions upload --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT
                                """)
                            }
                        }
                    }
                }
                stage ("Wrangler upload new secrets") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            script {
                                output = sh(returnStdout: true, script: """
                                    npx wrangler versions secret bulk new-secrets-bff --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT
                                """)
                                def versionId = (output =~ /Worker Version ID: ([^\s]+)/)[0][1]
                                env.VERSION_ID = versionId

                                def previewUrl = versionId.substring(0, 8) + env.WORKER_DOMAIN_END
                                env.PREVIEW_URL = previewUrl
                                env.AL_API_URL = previewUrl
                                echo "Version ID: $versionId"
                                echo "Preview URL: $previewUrl"
                            }
                        }   
                    }
                }
                stage ("Wrangler deploy bff") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            sh """
                                npx wrangler versions deploy --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT $VERSION_ID@100 -y
                            """   
                        }
                    }
                }
            }
        }
        stage("Build blog") {
            steps {
                sh """
                    pnpm run prerender
                """
            }
        }
        stage("Deploy blog prod") {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                ]) {
                    sh """                                                
                        npx wrangler pages deploy dist/apps/blog --project-name angular-love-client --branch ${BRANCH_NAME}
                    """
                }
            }
        }

    }
    post {
        always {
            cleanWs()
        }
    }
}