pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile-deploy'
            reuseNode true
        }
    }

    options {
        quietPeriod(0)
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        KV_DEV = credentials('cf-kv-dev')
        KV_PROD = credentials('cf-kv-prod')
        TURSO_ORG="angular-love"
        TURSO_EU_DB=credentials('turso-eu-db')
        TURSO_US_WEST_DB=credentials('turso-us-west-db')
        TURSO_US_EAST_DB=credentials('turso-us-east-db')
        TURSO_EU_AUTH_TOKEN=credentials('turso-eu-auth-token')
        TURSO_US_WEST_AUTH_TOKEN=credentials('turso-us-west-auth-token')
        TURSO_US_EAST_AUTH_TOKEN=credentials('turso-us-east-auth-token')
    }

    stages {
        stage("Install dependencies") {
            steps {
                script {
                    sh """
                        corepack enable && corepack prepare pnpm@10.6.2 --activate
                        pnpm install 
                    """
                }
            }
        }
        stage("Decide environment") {
            steps {
                script {
                    env.ENVIRONMENT = 'dev'
                    if (env.BRANCH_NAME == 'main') {
                        env.ENVIRONMENT = 'prod'
                    }
                }
            }
        }
        stage("Branch db") {
            steps {
                script {
                    def timestamp = new Date().getTime()
                    def random = Math.abs(new Random().nextInt())
                    env.BRANCH_HASH = "${timestamp}-${random}"
                }
                withCredentials([string(credentialsId: 'tursor_api_token', variable: 'TURSO_API_TOKEN')]) {
                    sh """
                        turso org switch angular-love
                        turso db create blog-eu-branch-${BRANCH_HASH} --from-db $TURSO_EU_DB --group blog-eu
                        turso db create blog-us-west-branch-${BRANCH_HASH} --from-db $TURSO_US_WEST_DB --group blog-us-west
                        turso db create blog-us-east-branch-${BRANCH_HASH} --from-db $TURSO_US_EAST_DB --group blog-us-east
                    """
                }
                
            }
        }
        stage("Deploy bff prod") {
            stages {
                stage("Prepare secrets") {
                    steps {
                        sh """
                            sed -i "s/<kv_dev_namespace_id>/$KV_DEV/g" apps/blog-bff/wrangler.toml
                            sed -i "s/<kv_prod_namespace_id>/$KV_PROD/g" apps/blog-bff/wrangler.toml
                            echo "
TURSO_EU_CONNECTION_URL=libsql://blog-eu-branch-${BRANCH_HASH}-angular-love.turso.io
TURSO_EU_AUTH_TOKEN=$TURSO_EU_AUTH_TOKEN
TURSO_US_EAST_CONNECTION_URL=libsql://blog-us-east-branch-${BRANCH_HASH}-angular-love.turso.io
TURSO_US_EAST_AUTH_TOKEN=$TURSO_US_EAST_AUTH_TOKEN
TURSO_US_WEST_CONNECTION_URL=libsql://blog-us-west-branch-${BRANCH_HASH}-angular-love.turso.io
TURSO_US_WEST_AUTH_TOKEN=$TURSO_US_WEST_AUTH_TOKEN" > new-secrets
                        """
                    }
                }
                stage ("Wrangler upload new version") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            script {
                                output = sh(returnStdout: true, script: """
                                    npx wrangler versions upload --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT
                                """)
                                def versionId = output.findAll(/Worker Version ID: ([^\s]+)/)[0][1]
                                def previewUrl = output.findAll(/Version Preview URL: ([^\s]+)/)[0][1]
                                env.VERSION_ID = versionId
                                env.PREVIEW_URL = previewUrl
                                echo "Version ID: $versionId"
                                echo "Preview URL: $previewUrl"
                            }
                        }
                    }
                }
                stage ("Wrangler upload new secrets") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            sh """
                                npx wrangler versions secret bulk new-secrets --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT
                            """   
                        }   
                    }
                }
                stage ("Wrangler deploy bff") {
                    steps {
                        withCredentials([
                            usernamePassword(credentialsId: 'cf-workers-creds', usernameVariable: 'CLOUDFLARE_ACCOUNT_ID', passwordVariable: 'CLOUDFLARE_API_TOKEN'),
                        ]) {
                            sh """
                                npx wrangler versions deploy --config apps/blog-bff/wrangler.toml --env $ENVIRONMENT $VERSION_ID@100 -y
                            """   
                        }
                    }
                }
            }
        }
        stage("Deploy blog prod") {
            steps {
                sh """
                    echo "turso branch db"
                """
            }
        }

    }
    post {
        always {
            cleanWs()
        }
    }
}
